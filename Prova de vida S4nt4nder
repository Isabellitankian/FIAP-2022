{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyP5my3TOLZ1odT7+A2jGgQM",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU",
    "gpuClass": "standard"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Isabellitankian/FIAP-2022/blob/main/Prova%20de%20vida%20S4nt4nder\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install fuzzywuzzy[speedup]\n",
        "!pip install -q pyngrok\n",
        "!pip install -q streamlit_ace\n",
        "!pip install -q streamlit\n",
        "!streamlit run app.py &>/dev/null&\n",
        "!pip install captcha\n",
        "!pip install git+https://github.com/cocodataset/panopticapi.git\n",
        "!git clone https://github.com/facebookresearch/detectron2.git\n",
        "!pip install ./detectron2\n",
        "!pip install --upgrade pyyaml"
      ],
      "metadata": {
        "id": "1D59MIar_8rn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "#Começa importando até a alma\n",
        "\n",
        "import numpy as np\n",
        "from fuzzywuzzy import process\n",
        "import json\n",
        "import requests\n",
        "import re\n",
        "import pandas as pd\n",
        "from pyngrok import ngrok\n",
        "\n",
        "import streamlit as st\n",
        "import re\n",
        "import requests\n",
        "\n",
        "from captcha.image import ImageCaptcha\n",
        "import cv2\n",
        "from detectron2.config import get_cfg\n",
        "from detectron2 import model_zoo\n",
        "from detectron2.engine import DefaultPredictor\n",
        "from detectron2.data import MetadataCatalog\n",
        "from PIL import Image\n",
        "\n",
        "def main():\n",
        "  \n",
        "  html_temp =  \"\"\"\n",
        "  <div style =\"background-color:#eee;padding:5px\"> \n",
        "    <h1 style =\"color:black;text-align:center;\">Prova de vida Banco Santander.</h1> \n",
        "    </div> \n",
        "\"\"\"\n",
        "\n",
        "  st.markdown(html_temp, unsafe_allow_html = True)\n",
        "  foto = Image.open('/content/Santander-Logo.png')\n",
        "\n",
        "  st.image(foto, \n",
        "         caption=\"Sua imagem está protegida de acordo com a lei LGPD.\", width=None, \n",
        "         use_column_width=\"auto\", \n",
        "         clamp=False, channels=\"RGB\", \n",
        "         output_format=\"auto\")\n",
        "\n",
        "  uploaded_file = st.file_uploader(\"Choose a image file\", type=\"jpg\")\n",
        "\n",
        "  isCaptcha = captcha()\n",
        "    \n",
        "\n",
        "  if uploaded_file is not None and isCaptcha:\n",
        "    file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)\n",
        "    image = cv2.imdecode(file_bytes, 1)\n",
        "    # st.image(image, channels=\"BGR\")\n",
        "    if verificarImagem(image):\n",
        "      st.success(\"Cadastro autorizado!\")\n",
        "    else:\n",
        "      st.error(\"Cadastro não autorizado!\")\n",
        "\n",
        "\n",
        "def verificarImagem(image):\n",
        "  cfg = get_cfg()\n",
        "  cfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\"))\n",
        "  cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5\n",
        "  cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\")\n",
        "  predictor = DefaultPredictor(cfg)\n",
        "  outputs = predictor(image)\n",
        "  pred_classes = outputs['instances'].pred_classes.cpu().tolist()\n",
        "  class_names = MetadataCatalog.get(\"coco_2017_val_panoptic_separated\").thing_classes\n",
        "  pred_class_names = list(map(lambda x: class_names[x], pred_classes))\n",
        "  print(pred_class_names)\n",
        "  try:\n",
        "    if \"person\" in pred_class_names and \"clock\" in pred_class_names :\n",
        "      return True\n",
        "    return False\n",
        "  except:\n",
        "    return False\n",
        "\n",
        "\n",
        "\n",
        "def captcha():\n",
        "  ls_phrases = [\"1\"]\n",
        "  phrase = ls_phrases[0]\n",
        "  generator = ImageCaptcha(180, 60, font_sizes=[36])\n",
        "  img = generator.generate_image(phrase)\n",
        "  st.image(img)\n",
        "  text = st.text_input(\"Captcha\")\n",
        "  button = st.button(\"Verificar\")\n",
        "  if button and text == phrase:\n",
        "      st.success(\"Verificado!\")\n",
        "      return True\n",
        "  return False\n",
        "\n",
        "if __name__=='__main__': \n",
        "    main()  "
      ],
      "metadata": {
        "id": "8sy1KK9CpenN",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf772adc-15e2-46fe-a279-cebb9c260f7b"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Overwriting app.py\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!streamlit run app.py & npx localtunnel --port 8501"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yJwpxSGF_hYT",
        "outputId": "ac418687-75e8-4b15-bde4-a07d4cf645cf"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2022-09-07 19:54:07.673 INFO    numexpr.utils: NumExpr defaulting to 2 threads.\n",
            "\u001b[0m\n",
            "\u001b[34m\u001b[1m  You can now view your Streamlit app in your browser.\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[34m  Network URL: \u001b[0m\u001b[1mhttp://172.28.0.2:8501\u001b[0m\n",
            "\u001b[34m  External URL: \u001b[0m\u001b[1mhttp://34.86.255.116:8501\u001b[0m\n",
            "\u001b[0m\n",
            "\u001b[K\u001b[?25hnpx: installed 22 in 2.798s\n",
            "your url is: https://brave-baths-cross-34-86-255-116.loca.lt\n",
            "2022-09-07 20:00:09.929 [Checkpointer] Loading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...\n",
            "2022-09-07 20:00:09.930 Downloading https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...\n",
            "2022-09-07 20:00:09.930 Downloading from https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl ...\n",
            "model_final_f10217.pkl: 178MB [00:05, 33.5MB/s]               \n",
            "2022-09-07 20:00:15.245 Successfully downloaded /root/.torch/iopath_cache/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl. 177841981 bytes.\n",
            "2022-09-07 20:00:15.245 URL https://dl.fbaipublicfiles.com/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl cached in /root/.torch/iopath_cache/detectron2/COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x/137849600/model_final_f10217.pkl\n",
            "2022-09-07 20:00:15.361 Reading a file from 'Detectron2 Model Zoo'\n",
            "/usr/local/lib/python3.7/dist-packages/torch/functional.py:478: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ../aten/src/ATen/native/TensorShape.cpp:2894.)\n",
            "  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]\n",
            "['clock', 'person', 'book']\n",
            "\u001b[34m  Stopping...\u001b[0m\n",
            "^C\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def captcha():\n",
        "  ls_phrases = [\"1\", \"2\"]\n",
        "  phrase = ls_phrases[0]\n",
        "  generator = ImageCaptcha(180, 60, font_sizes=[36])\n",
        "  img = generator.generate_image(phrase)\n",
        "  st.image(img)\n",
        "  text = st.text_input(\"Captcha\")\n",
        "  button = st.button(\"Verificar\")\n",
        "  if button and text == phrase:\n",
        "      st.success(\"Varificado!\")\n",
        "      return True\n",
        "  return False"
      ],
      "metadata": {
        "id": "cr9M4O7X_C3B"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "im = cv2.imread(\"/content/images.jpg\")\n",
        "\n",
        "cfg = get_cfg()\n",
        "cfg.merge_from_file(model_zoo.get_config_file(\"COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\"))\n",
        "cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5\n",
        "cfg.MODEL.WEIGHTS = model_zoo.get_checkpoint_url(\"COCO-InstanceSegmentation/mask_rcnn_R_50_FPN_3x.yaml\")\n",
        "predictor = DefaultPredictor(cfg)\n",
        "outputs = predictor(im)\n",
        "\n",
        "pred_classes = outputs['instances'].pred_classes.cpu().tolist()\n",
        "class_names = MetadataCatalog.get(\"coco_2017_val_panoptic_separated\").thing_classes\n",
        "pred_class_names = list(map(lambda x: class_names[x], pred_classes))"
      ],
      "metadata": {
        "id": "2K7JPK-UqRIE"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pred_class_names"
      ],
      "metadata": {
        "id": "UVwlfCMv9Oyx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}